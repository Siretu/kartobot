%!PS-Adobe-2.0 EPSF-3.0
%%BoundingBox: 60 90 257 380

/skipx 0 def
/skipy 6 def
/width 20 def
/height 15 def

/header {
	10 dict begin
		/y rdef
		/x rdef
		x y 3 sil
		x 1 add y 3 sil
		x y cut
		x y 1 add cut
		x y 2 add cut
	end
} def

/stuff {
	10 10 4 4 dil_up_x
	10.0 14 (ATtiny15) text

	% audio

	17 6 11 vres
	13 6 9 cap
	18 6 7 pmcap
	19 7 dot
	19 9 dot
	8 6 cut

	% npn

	5 9 dot
	5 8 dot
	5 7 dot
	6 7 13 vres
	7 8 12 vres
	18 8 11 vres

	4 8 cut
	4 7 cut

	4 9 dot
	4 8 dot
	4 7 dot
	3 7 13 vres
	2 7 10 cap
	1 8 12 vres

	% vga

	4 10 dot
	4 10 (Gnd) text

	15 10 dot
	14.2 10 (V) text
	15 12 dot
	14.2 12 (H) text

	1 6 7 vres
	7 6 7 vres
	8 7 cut
	3 6 dot
	3 6 (G) text

	0 7 14 vres
	2 11 14 vres
	1 14 dot
	1 14 (R) text

	3 14 cut
	8 7 14 vres
	5 11 14 vres
	4 11 14 vres
	6 14 dot
	6 14 (B) text

	% power

	15 9 dot
	18 13 dot
	15 13 cut
	19 10 13 diode_dn
	15 10 cut
	16 10 dot
	16 9 dot
	16 7 dot
	11 7 9 pmcap

	% vcc

	15 13 14 line
	9 13 14 line
	14 7 13 line
	16 7 cut
	14.1 7 (Vcc) text
	14.1 9 (Gnd) text
	8 14 cut

	% gnd

	9 9 10 line

	% led

	9 6 7 led_dn
	10 6 9 vres
	11 6 cut

	% label

	16 14 (lft 110211) text
} def




/rdef { exch def } bind def
72 100 translate
7.20 7.20 scale
/Helvetica findfont 0.7 scalefont setfont

/rows height array def
0 1 height 1 sub {
	/a width array def
	rows exch a put
	0 1 width 1 sub {
		a exch false put
	} for
} for
/cutright height array def
0 1 height 1 sub {
	/a width array def
	cutright exch a put
	0 1 width 1 sub {
		a exch false put
	} for
} for

skipx 1 width 1 sub {
	/x rdef
	skipy 1 height 1 sub {
		/y rdef
		newpath x y 0.02 0 360 arc fill
	} for
} for

/bwidth 0.6 def
/bheight 0.7 def
0.02 setlinewidth newpath
	skipx bwidth sub skipy bheight sub moveto
	width 1 sub bwidth add skipy bheight sub lineto
	width 1 sub bwidth add height 1 sub bheight add lineto
	skipx bwidth sub height 1 sub bheight add lineto
	skipx bwidth sub skipy bheight sub lineto
stroke

/dot {
	10 dict begin
		/y rdef
		/x rdef
		rows y get x true put
	end
} bind def

/cut {
	10 dict begin
		/y rdef
		/x rdef
		cutright y get x true put
	end
} bind def

/line {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		0.05 setlinewidth newpath
			x y1 moveto
			x y2 lineto
		stroke
	end
} bind def

/box {
	10 dict begin
		/y2 rdef
		/x2 rdef
		/y1 rdef
		/x1 rdef
		0.05 setlinewidth newpath
			x1 y1 moveto
			x2 y1 lineto
			x2 y2 lineto
			x1 y2 lineto
			x1 y1 lineto
		stroke
	end
} bind def

/xtal {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		/mid y1 y2 add 2 div def
		/sz 0.15 def
		x sz sub mid sz sub x sz add mid sz add box
		newpath
			x sz sub mid sz sub .1 sub moveto sz sz add 0 rlineto
			x sz sub mid sz add .1 add moveto sz sz add 0 rlineto
		stroke
	end
} bind def

/vres {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 y2 line
		/mid y1 y2 add 2 div def
		y1 1 add y2 eq {
			/hsize 0.15 def
			/vsize 0.30 def
		} {
			/hsize 0.25 def
			/vsize 0.65 def
		} ifelse
		1 setgray
		newpath
			x hsize sub mid vsize sub moveto
			x hsize sub mid vsize add lineto
			x hsize add mid vsize add lineto
			x hsize add mid vsize sub lineto
		fill
		0 setgray
		x hsize sub mid vsize sub x hsize add mid vsize add box
	end
} bind def

/hres {
	10 dict begin
		/x2 rdef
		/x1 rdef
		/y rdef
		x1 y dot
		x2 y dot
		0.05 setlinewidth newpath
			x1 y moveto
			x2 y lineto
		stroke
		/mid x1 x2 add 2 div def
		/vsize 0.25 def
		/hsize 0.65 def
		1 setgray
		newpath
			mid hsize sub y vsize sub moveto
			mid hsize sub y vsize add lineto
			mid hsize add y vsize add lineto
			mid hsize add y vsize sub lineto
		fill
		0 setgray
		mid hsize sub y vsize sub mid hsize add y vsize add box
	end
} bind def

/vrestext {
	10 dict begin
		/txt rdef
		/y2 rdef
		/y1 rdef
		/x rdef
		/mid y1 y2 add 2 div def
		y1 1 add y2 eq {
			/hsize 0.15 def
			/vsize 0.30 def
		} {
			/hsize 0.25 def
			/vsize 0.65 def
			gsave
				x hsize sub mid translate
				270 rotate
				0.65 0.65 scale
				txt stringwidth pop 2 div neg 0.13 moveto txt show
			grestore
		} ifelse
	end
} bind def

/mpcap {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		/mid y1 y2 add 2 div def
		/hsize1 0.25 def
		/hsize2 0.45 def
		/vsize 0.10 def
		newpath
			x y1 moveto x mid vsize sub lineto
			x y2 moveto x mid vsize add lineto

			x hsize1 sub mid vsize add moveto
			x hsize1 add mid vsize add lineto

			x hsize2 sub mid vsize add moveto
			x hsize2 sub mid vsize sub
			x hsize2 sub mid vsize sub
			x hsize1 sub mid vsize sub curveto

			x hsize1 add mid vsize sub lineto

			x hsize2 add mid vsize sub
			x hsize2 add mid vsize sub
			x hsize2 add mid vsize add curveto
		stroke
	end
} bind def

/pmcap {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		/mid y1 y2 add 2 div def
		/hsize1 0.25 def
		/hsize2 0.45 def
		/vsize 0.10 def
		newpath
			x y1 moveto x mid vsize sub lineto
			x y2 moveto x mid vsize add lineto

			x hsize1 sub mid vsize sub moveto
			x hsize1 add mid vsize sub lineto

			x hsize2 sub mid vsize sub moveto
			x hsize2 sub mid vsize add
			x hsize2 sub mid vsize add
			x hsize1 sub mid vsize add curveto

			x hsize1 add mid vsize add lineto

			x hsize2 add mid vsize add
			x hsize2 add mid vsize add
			x hsize2 add mid vsize sub curveto
		stroke
	end
} bind def

/cap {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		/mid y1 y2 add 2 div def
		/hsize 0.35 def
		/vsize 0.08 def
		newpath
			x y1 moveto x mid vsize sub lineto
			x y2 moveto x mid vsize add lineto

			x hsize sub mid vsize add moveto
			x hsize add mid vsize add lineto
			x hsize sub mid vsize sub moveto
			x hsize add mid vsize sub lineto
		stroke
	end
} bind def

/diode {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		/hsize 0.22 def
		/vsize -0.18 def
		/bar y1 y2 add 2 div vsize sub def
		/top y1 y2 add 2 div vsize add def
		0.05 setlinewidth newpath
			x y1 moveto x y2 lineto
			x hsize sub bar moveto x hsize add bar lineto
		stroke
		1 setgray
		newpath
			x bar moveto x hsize sub top lineto x hsize add top lineto
		fill
		0 setgray
		newpath
			x bar moveto x hsize sub top lineto x hsize add top lineto x bar lineto
		stroke
	end
} bind def

/diode_dn {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 dot
		x y2 dot
		/hsize 0.22 def
		/vsize -0.18 def
		/bar y1 y2 add 2 div vsize add def
		/top y1 y2 add 2 div vsize sub def
		0.05 setlinewidth newpath
			x y1 moveto x y2 lineto
			x hsize sub bar moveto x hsize add bar lineto
		stroke
		1 setgray
		newpath
			x bar moveto x hsize sub top lineto x hsize add top lineto
		fill
		0 setgray
		newpath
			x bar moveto x hsize sub top lineto x hsize add top lineto x bar lineto
		stroke
	end
} bind def

/led {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 y2 diode
		/y y1 y2 add 2 div def
		0.02 setlinewidth newpath
			x .35 sub y .05 add moveto
			-.15 -.15 rlineto 0 .1 rlineto 0 -.1 rmoveto .1 0 rlineto
			x .27 sub y .07 sub moveto
			-.15 -.15 rlineto 0 .1 rlineto 0 -.1 rmoveto .1 0 rlineto
		stroke
	end
} bind def

/led_dn {
	10 dict begin
		/y2 rdef
		/y1 rdef
		/x rdef
		x y1 y2 diode_dn
		/y y1 y2 add 2 div def
		0.02 setlinewidth newpath
			x .35 sub y .05 add moveto
			-.15 -.15 rlineto 0 .1 rlineto 0 -.1 rmoveto .1 0 rlineto
			x .27 sub y .07 sub moveto
			-.15 -.15 rlineto 0 .1 rlineto 0 -.1 rmoveto .1 0 rlineto
		stroke
	end
} bind def

/sil {
	10 dict begin
		/size rdef
		/y rdef
		/x rdef
		0 1 size 1 sub {
			x exch y add dot
		} for
		x 0.3 sub y 0.4 sub x 0.3 add y size add 1 sub 0.4 add box
	end
} bind def

/widesil {
	10 dict begin
		/size rdef
		/y rdef
		/x rdef
		0 1 size 1 sub {
			x exch y add dot
		} for
		x 1.3 sub y 0.4 sub x 1.3 add y size add 1 sub 0.4 add box
	end
} bind def

/text {
	10 dict begin
		/txt rdef
		/y rdef
		/x rdef
		x 0.1 add y 0.25 sub moveto txt show
	end
} bind def

/rtext {
	10 dict begin
		/txt rdef
		/y rdef
		/x rdef
		x 0.1 add y 0.25 sub moveto txt stringwidth pop neg 0 rmoveto txt show
	end
} bind def

/vtext {
	10 dict begin
		/txt rdef
		/y rdef
		/x rdef
		gsave
			x 0.1 add y 0.25 sub translate
			270 rotate
			txt stringwidth pop /w rdef
			/h 0.6 def
			1 setgray
			newpath
				0 0 moveto w 0 lineto w h lineto 0 h lineto
			fill
			0 setgray
			0 0 moveto txt show
		grestore
	end
} bind def

/pnp_vl_cbe {
	10 dict begin
		/y rdef
		/x rdef
		x y dot
		x y 1 add dot
		x y 2 add dot
		0.08 setlinewidth newpath
			x 0.2 sub y 0.6 add moveto
			x 0.2 sub y 1.4 add lineto
		stroke
		0.05 setlinewidth newpath
			x 0.2 sub y 1.1 add moveto
			-0.5 0.2
			-0.5 0.8
			0.2 0.9 rcurveto
		stroke
		newpath
			x 0.2 sub y 0.9 add moveto
			-0.5 -0.2
			-0.5 -0.8
			0.2 -0.9 rcurveto
		stroke
		newpath
			x 0.35 sub y 1.4 add moveto
			0.15 -0.3 rlineto
			-0.3 0 rlineto
		stroke
	end
} bind def

/dil_up {
	10 dict begin
		/h rdef
		/w rdef
		/y rdef
		/x rdef
		0 1 h 1 sub {
			/i rdef
			x y i add dot
			x w add 1 sub y i add dot
		} for
		w 2 gt {
			0.05 setlinewidth newpath
				x 0.3 sub y h add 1 sub 0.4 add moveto
				x 0.3 sub y 0.3 sub lineto
				x w add 1 sub 0.3 add y 0.3 sub lineto
				x w add 1 sub 0.3 add y h add 1 sub 0.4 add lineto

				x w add 2.2 sub y h add 1 sub 0.4 add lineto
				x w add 2.4 sub y h add 0.8 sub
				x 1.4 add y h add 0.8 sub
				x 1.2 add y h add 1 sub 0.4 add curveto
				x 0.3 sub y h add 1 sub 0.4 add lineto
			stroke
		} {
			0.05 setlinewidth newpath
				x 0.3 sub y h add .7 sub moveto
				x 0.3 sub y 0.3 sub lineto
				x w add 1 sub 0.3 add y 0.3 sub lineto
				x w add 1 sub 0.3 add y h add 0.7 sub lineto
				x 0.3 sub y h add .7 sub lineto
			stroke
		} ifelse
	end
} bind def

/dil_dn {
	10 dict begin
		/h rdef
		/w rdef
		/y rdef
		/x rdef
		0 1 h 1 sub {
			/i rdef
			x y i add dot
			x w add 1 sub y i add dot
		} for
		/y y h add def
		/h h neg def
		0.05 setlinewidth newpath
			x 0.3 sub y h add 1 sub 0.4 add moveto
			x 0.3 sub y 0.3 sub lineto
			x w add 1 sub 0.3 add y 0.3 sub lineto
			x w add 1 sub 0.3 add y h add 1 sub 0.4 add lineto

			x w add 2.2 sub y h add 1 sub 0.4 add lineto
			x w add 2.4 sub y h add 0.4 sub
			x 1.4 add y h add 0.4 sub
			x 1.2 add y h add 1 sub 0.4 add curveto
			x 0.3 sub y h add 1 sub 0.4 add lineto
		stroke
	end
} bind def

/dil_up_x {
	10 dict begin
		/h rdef
		/w rdef
		/y rdef
		/x rdef
		x y w h dil_up
		0 1 h 1 sub {
			x 1 sub w 2 idiv add exch y add cut
		} for
	end
} bind def

/dil_dn_x {
	10 dict begin
		/h rdef
		/w rdef
		/y rdef
		/x rdef
		x y w h dil_dn
		0 1 h 1 sub {
			x 1 sub w 2 idiv add exch y add cut
		} for
	end
} bind def

/trimpot5 {
	10 dict begin
		/y rdef
		/x rdef
		x y dot
		x y 2 add dot
		x 4 add y 1 add dot
		x 0.4 sub y 0.4 sub x 4 add 0.4 add y 2 add 0.4 add box
	end
} bind def

/trimpot3 {
	10 dict begin
		/y rdef
		/x rdef
		x y dot
		x y 2 add dot
		x 2 add y 1 add dot
		x 0.4 sub y 0.4 sub x 2 add 0.4 add y 2 add 0.4 add box
	end
} bind def

/button {
	10 dict begin
		/y rdef
		/x rdef
		x y dot
		x 2 add y dot
		x 2 add y 3 add dot
		x y 3 add dot
		x .4 sub y .4 sub x 2.4 add y 3.4 add box
	end
} bind def

stuff

/horizlines {
	0 1 height 1 sub {
		/y rdef
		newpath
			/drawing false def
			0 1 width 1 sub {
				/x rdef
				rows y get x get {
					x y
					drawing {
						lineto
					} {
						moveto
					} ifelse
					/drawing true def
				} if
				cutright y get x get {
					/drawing false def
				} if
			} for
		stroke
	} for
} bind def
1 setlinecap 0.85 setlinewidth 0.90 setgray horizlines
0 setlinecap 0.05 setlinewidth 0 setgray %horizlines

0 1 height 1 sub {
	/y rdef
	0 1 width 1 sub {
		/x rdef
		rows y get x get {
			newpath x y 0.1 0 360 arc fill
		} if
	} for
} for

/cutsize 0.15 def
0 1 height 1 sub {
	/y rdef
	0 1 width 1 sub {
		/x rdef
		cutright y get x get {
			/x x 0.5 add def
			0.05 setlinewidth newpath
				x cutsize sub y cutsize sub moveto
				x y lineto
				x cutsize add y cutsize sub lineto
				x cutsize sub y cutsize add moveto
				x y lineto
				x cutsize add y cutsize add lineto
			stroke
		} if
	} for
} for


stuff

showpage
